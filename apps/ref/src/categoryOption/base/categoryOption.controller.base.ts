/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { CategoryOptionService } from "../categoryOption.service";
import { CategoryOptionCreateInput } from "./CategoryOptionCreateInput";
import { CategoryOption } from "./CategoryOption";
import { CategoryOptionFindManyArgs } from "./CategoryOptionFindManyArgs";
import { CategoryOptionWhereUniqueInput } from "./CategoryOptionWhereUniqueInput";
import { CategoryOptionUpdateInput } from "./CategoryOptionUpdateInput";
import { CategoryFindManyArgs } from "../../category/base/CategoryFindManyArgs";
import { Category } from "../../category/base/Category";
import { CategoryWhereUniqueInput } from "../../category/base/CategoryWhereUniqueInput";
import { OptionFindManyArgs } from "../../option/base/OptionFindManyArgs";
import { Option } from "../../option/base/Option";
import { OptionWhereUniqueInput } from "../../option/base/OptionWhereUniqueInput";

export class CategoryOptionControllerBase {
  constructor(protected readonly service: CategoryOptionService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: CategoryOption })
  async createCategoryOption(
    @common.Body() data: CategoryOptionCreateInput
  ): Promise<CategoryOption> {
    return await this.service.createCategoryOption({
      data: data,
      select: {
        id: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [CategoryOption] })
  @ApiNestedQuery(CategoryOptionFindManyArgs)
  async categoryOptions(
    @common.Req() request: Request
  ): Promise<CategoryOption[]> {
    const args = plainToClass(CategoryOptionFindManyArgs, request.query);
    return this.service.categoryOptions({
      ...args,
      select: {
        id: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: CategoryOption })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async categoryOption(
    @common.Param() params: CategoryOptionWhereUniqueInput
  ): Promise<CategoryOption | null> {
    const result = await this.service.categoryOption({
      where: params,
      select: {
        id: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: CategoryOption })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateCategoryOption(
    @common.Param() params: CategoryOptionWhereUniqueInput,
    @common.Body() data: CategoryOptionUpdateInput
  ): Promise<CategoryOption | null> {
    try {
      return await this.service.updateCategoryOption({
        where: params,
        data: data,
        select: {
          id: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: CategoryOption })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteCategoryOption(
    @common.Param() params: CategoryOptionWhereUniqueInput
  ): Promise<CategoryOption | null> {
    try {
      return await this.service.deleteCategoryOption({
        where: params,
        select: {
          id: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Get("/:id/category")
  @ApiNestedQuery(CategoryFindManyArgs)
  async findCategory(
    @common.Req() request: Request,
    @common.Param() params: CategoryOptionWhereUniqueInput
  ): Promise<Category[]> {
    const query = plainToClass(CategoryFindManyArgs, request.query);
    const results = await this.service.findCategory(params.id, {
      ...query,
      select: {
        createdBy: true,
        createdOn: true,
        id: true,
        label: true,
        modifiedBy: true,
        modifiedOn: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/category")
  async connectCategory(
    @common.Param() params: CategoryOptionWhereUniqueInput,
    @common.Body() body: CategoryWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      category: {
        connect: body,
      },
    };
    await this.service.updateCategoryOption({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/category")
  async updateCategory(
    @common.Param() params: CategoryOptionWhereUniqueInput,
    @common.Body() body: CategoryWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      category: {
        set: body,
      },
    };
    await this.service.updateCategoryOption({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/category")
  async disconnectCategory(
    @common.Param() params: CategoryOptionWhereUniqueInput,
    @common.Body() body: CategoryWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      category: {
        disconnect: body,
      },
    };
    await this.service.updateCategoryOption({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/option")
  @ApiNestedQuery(OptionFindManyArgs)
  async findOption(
    @common.Req() request: Request,
    @common.Param() params: CategoryOptionWhereUniqueInput
  ): Promise<Option[]> {
    const query = plainToClass(OptionFindManyArgs, request.query);
    const results = await this.service.findOption(params.id, {
      ...query,
      select: {
        createdAt: true,
        createdBy: true,
        id: true,
        label: true,
        modifiedBy: true,
        updatedAt: true,
        value: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/option")
  async connectOption(
    @common.Param() params: CategoryOptionWhereUniqueInput,
    @common.Body() body: OptionWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      option: {
        connect: body,
      },
    };
    await this.service.updateCategoryOption({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/option")
  async updateOption(
    @common.Param() params: CategoryOptionWhereUniqueInput,
    @common.Body() body: OptionWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      option: {
        set: body,
      },
    };
    await this.service.updateCategoryOption({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/option")
  async disconnectOption(
    @common.Param() params: CategoryOptionWhereUniqueInput,
    @common.Body() body: OptionWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      option: {
        disconnect: body,
      },
    };
    await this.service.updateCategoryOption({
      where: params,
      data,
      select: { id: true },
    });
  }
}
