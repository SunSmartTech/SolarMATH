/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  CategoryOption as PrismaCategoryOption,
  Category as PrismaCategory,
  Option as PrismaOption,
} from "@prisma/client";

export class CategoryOptionServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.CategoryOptionCountArgs, "select">
  ): Promise<number> {
    return this.prisma.categoryOption.count(args);
  }

  async categoryOptions<T extends Prisma.CategoryOptionFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.CategoryOptionFindManyArgs>
  ): Promise<PrismaCategoryOption[]> {
    return this.prisma.categoryOption.findMany<Prisma.CategoryOptionFindManyArgs>(
      args
    );
  }
  async categoryOption<T extends Prisma.CategoryOptionFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.CategoryOptionFindUniqueArgs>
  ): Promise<PrismaCategoryOption | null> {
    return this.prisma.categoryOption.findUnique(args);
  }
  async createCategoryOption<T extends Prisma.CategoryOptionCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.CategoryOptionCreateArgs>
  ): Promise<PrismaCategoryOption> {
    return this.prisma.categoryOption.create<T>(args);
  }
  async updateCategoryOption<T extends Prisma.CategoryOptionUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.CategoryOptionUpdateArgs>
  ): Promise<PrismaCategoryOption> {
    return this.prisma.categoryOption.update<T>(args);
  }
  async deleteCategoryOption<T extends Prisma.CategoryOptionDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.CategoryOptionDeleteArgs>
  ): Promise<PrismaCategoryOption> {
    return this.prisma.categoryOption.delete(args);
  }

  async findCategory(
    parentId: string,
    args: Prisma.CategoryFindManyArgs
  ): Promise<PrismaCategory[]> {
    return this.prisma.categoryOption
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .category(args);
  }

  async findOption(
    parentId: string,
    args: Prisma.OptionFindManyArgs
  ): Promise<PrismaOption[]> {
    return this.prisma.categoryOption
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .option(args);
  }
}
