/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { CalculationTool } from "./CalculationTool";
import { CalculationToolCountArgs } from "./CalculationToolCountArgs";
import { CalculationToolFindManyArgs } from "./CalculationToolFindManyArgs";
import { CalculationToolFindUniqueArgs } from "./CalculationToolFindUniqueArgs";
import { CreateCalculationToolArgs } from "./CreateCalculationToolArgs";
import { UpdateCalculationToolArgs } from "./UpdateCalculationToolArgs";
import { DeleteCalculationToolArgs } from "./DeleteCalculationToolArgs";
import { CustomerProfile } from "../../customerProfile/base/CustomerProfile";
import { CalculationToolService } from "../calculationTool.service";
@graphql.Resolver(() => CalculationTool)
export class CalculationToolResolverBase {
  constructor(protected readonly service: CalculationToolService) {}

  async _calculationToolsMeta(
    @graphql.Args() args: CalculationToolCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [CalculationTool])
  async calculationTools(
    @graphql.Args() args: CalculationToolFindManyArgs
  ): Promise<CalculationTool[]> {
    return this.service.calculationTools(args);
  }

  @graphql.Query(() => CalculationTool, { nullable: true })
  async calculationTool(
    @graphql.Args() args: CalculationToolFindUniqueArgs
  ): Promise<CalculationTool | null> {
    const result = await this.service.calculationTool(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => CalculationTool)
  async createCalculationTool(
    @graphql.Args() args: CreateCalculationToolArgs
  ): Promise<CalculationTool> {
    return await this.service.createCalculationTool({
      ...args,
      data: {
        ...args.data,

        customerProfile: args.data.customerProfile
          ? {
              connect: args.data.customerProfile,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => CalculationTool)
  async updateCalculationTool(
    @graphql.Args() args: UpdateCalculationToolArgs
  ): Promise<CalculationTool | null> {
    try {
      return await this.service.updateCalculationTool({
        ...args,
        data: {
          ...args.data,

          customerProfile: args.data.customerProfile
            ? {
                connect: args.data.customerProfile,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => CalculationTool)
  async deleteCalculationTool(
    @graphql.Args() args: DeleteCalculationToolArgs
  ): Promise<CalculationTool | null> {
    try {
      return await this.service.deleteCalculationTool(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => CustomerProfile, {
    nullable: true,
    name: "customerProfile",
  })
  async getCustomerProfile(
    @graphql.Parent() parent: CalculationTool
  ): Promise<CustomerProfile | null> {
    const result = await this.service.getCustomerProfile(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
