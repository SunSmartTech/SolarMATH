/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { CalculationToolService } from "../calculationTool.service";
import { CalculationToolCreateInput } from "./CalculationToolCreateInput";
import { CalculationTool } from "./CalculationTool";
import { CalculationToolFindManyArgs } from "./CalculationToolFindManyArgs";
import { CalculationToolWhereUniqueInput } from "./CalculationToolWhereUniqueInput";
import { CalculationToolUpdateInput } from "./CalculationToolUpdateInput";

export class CalculationToolControllerBase {
  constructor(protected readonly service: CalculationToolService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: CalculationTool })
  async createCalculationTool(
    @common.Body() data: CalculationToolCreateInput
  ): Promise<CalculationTool> {
    return await this.service.createCalculationTool({
      data: {
        ...data,

        customerProfile: data.customerProfile
          ? {
              connect: data.customerProfile,
            }
          : undefined,
      },
      select: {
        calculationDetails: true,
        createdAt: true,

        customerProfile: {
          select: {
            id: true,
          },
        },

        id: true,
        result: true,
        toolName: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [CalculationTool] })
  @ApiNestedQuery(CalculationToolFindManyArgs)
  async calculationTools(
    @common.Req() request: Request
  ): Promise<CalculationTool[]> {
    const args = plainToClass(CalculationToolFindManyArgs, request.query);
    return this.service.calculationTools({
      ...args,
      select: {
        calculationDetails: true,
        createdAt: true,

        customerProfile: {
          select: {
            id: true,
          },
        },

        id: true,
        result: true,
        toolName: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: CalculationTool })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async calculationTool(
    @common.Param() params: CalculationToolWhereUniqueInput
  ): Promise<CalculationTool | null> {
    const result = await this.service.calculationTool({
      where: params,
      select: {
        calculationDetails: true,
        createdAt: true,

        customerProfile: {
          select: {
            id: true,
          },
        },

        id: true,
        result: true,
        toolName: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: CalculationTool })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateCalculationTool(
    @common.Param() params: CalculationToolWhereUniqueInput,
    @common.Body() data: CalculationToolUpdateInput
  ): Promise<CalculationTool | null> {
    try {
      return await this.service.updateCalculationTool({
        where: params,
        data: {
          ...data,

          customerProfile: data.customerProfile
            ? {
                connect: data.customerProfile,
              }
            : undefined,
        },
        select: {
          calculationDetails: true,
          createdAt: true,

          customerProfile: {
            select: {
              id: true,
            },
          },

          id: true,
          result: true,
          toolName: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: CalculationTool })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteCalculationTool(
    @common.Param() params: CalculationToolWhereUniqueInput
  ): Promise<CalculationTool | null> {
    try {
      return await this.service.deleteCalculationTool({
        where: params,
        select: {
          calculationDetails: true,
          createdAt: true,

          customerProfile: {
            select: {
              id: true,
            },
          },

          id: true,
          result: true,
          toolName: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
