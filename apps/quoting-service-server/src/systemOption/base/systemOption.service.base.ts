/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, SystemOption as PrismaSystemOption } from "@prisma/client";

export class SystemOptionServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.SystemOptionCountArgs, "select">
  ): Promise<number> {
    return this.prisma.systemOption.count(args);
  }

  async systemOptions<T extends Prisma.SystemOptionFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.SystemOptionFindManyArgs>
  ): Promise<PrismaSystemOption[]> {
    return this.prisma.systemOption.findMany<Prisma.SystemOptionFindManyArgs>(
      args
    );
  }
  async systemOption<T extends Prisma.SystemOptionFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.SystemOptionFindUniqueArgs>
  ): Promise<PrismaSystemOption | null> {
    return this.prisma.systemOption.findUnique(args);
  }
  async createSystemOption<T extends Prisma.SystemOptionCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.SystemOptionCreateArgs>
  ): Promise<PrismaSystemOption> {
    return this.prisma.systemOption.create<T>(args);
  }
  async updateSystemOption<T extends Prisma.SystemOptionUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.SystemOptionUpdateArgs>
  ): Promise<PrismaSystemOption> {
    return this.prisma.systemOption.update<T>(args);
  }
  async deleteSystemOption<T extends Prisma.SystemOptionDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.SystemOptionDeleteArgs>
  ): Promise<PrismaSystemOption> {
    return this.prisma.systemOption.delete(args);
  }
}
