/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { SystemOption } from "./SystemOption";
import { SystemOptionCountArgs } from "./SystemOptionCountArgs";
import { SystemOptionFindManyArgs } from "./SystemOptionFindManyArgs";
import { SystemOptionFindUniqueArgs } from "./SystemOptionFindUniqueArgs";
import { CreateSystemOptionArgs } from "./CreateSystemOptionArgs";
import { UpdateSystemOptionArgs } from "./UpdateSystemOptionArgs";
import { DeleteSystemOptionArgs } from "./DeleteSystemOptionArgs";
import { SystemOptionService } from "../systemOption.service";
@graphql.Resolver(() => SystemOption)
export class SystemOptionResolverBase {
  constructor(protected readonly service: SystemOptionService) {}

  async _systemOptionsMeta(
    @graphql.Args() args: SystemOptionCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [SystemOption])
  async systemOptions(
    @graphql.Args() args: SystemOptionFindManyArgs
  ): Promise<SystemOption[]> {
    return this.service.systemOptions(args);
  }

  @graphql.Query(() => SystemOption, { nullable: true })
  async systemOption(
    @graphql.Args() args: SystemOptionFindUniqueArgs
  ): Promise<SystemOption | null> {
    const result = await this.service.systemOption(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => SystemOption)
  async createSystemOption(
    @graphql.Args() args: CreateSystemOptionArgs
  ): Promise<SystemOption> {
    return await this.service.createSystemOption({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => SystemOption)
  async updateSystemOption(
    @graphql.Args() args: UpdateSystemOptionArgs
  ): Promise<SystemOption | null> {
    try {
      return await this.service.updateSystemOption({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => SystemOption)
  async deleteSystemOption(
    @graphql.Args() args: DeleteSystemOptionArgs
  ): Promise<SystemOption | null> {
    try {
      return await this.service.deleteSystemOption(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
