/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { CustomerProfileService } from "../customerProfile.service";
import { CustomerProfileCreateInput } from "./CustomerProfileCreateInput";
import { CustomerProfile } from "./CustomerProfile";
import { CustomerProfileFindManyArgs } from "./CustomerProfileFindManyArgs";
import { CustomerProfileWhereUniqueInput } from "./CustomerProfileWhereUniqueInput";
import { CustomerProfileUpdateInput } from "./CustomerProfileUpdateInput";
import { CalculationToolFindManyArgs } from "../../calculationTool/base/CalculationToolFindManyArgs";
import { CalculationTool } from "../../calculationTool/base/CalculationTool";
import { CalculationToolWhereUniqueInput } from "../../calculationTool/base/CalculationToolWhereUniqueInput";

export class CustomerProfileControllerBase {
  constructor(protected readonly service: CustomerProfileService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: CustomerProfile })
  async createCustomerProfile(
    @common.Body() data: CustomerProfileCreateInput
  ): Promise<CustomerProfile> {
    return await this.service.createCustomerProfile({
      data: data,
      select: {
        bestContactTimes: true,
        createdAt: true,
        customerStatusId: true,
        customerType: true,
        email: true,
        firstname: true,
        id: true,
        lastname: true,
        notYetAssigned: true,
        phone: true,
        requirements: true,
        site_adress: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [CustomerProfile] })
  @ApiNestedQuery(CustomerProfileFindManyArgs)
  async customerProfiles(
    @common.Req() request: Request
  ): Promise<CustomerProfile[]> {
    const args = plainToClass(CustomerProfileFindManyArgs, request.query);
    return this.service.customerProfiles({
      ...args,
      select: {
        bestContactTimes: true,
        createdAt: true,
        customerStatusId: true,
        customerType: true,
        email: true,
        firstname: true,
        id: true,
        lastname: true,
        notYetAssigned: true,
        phone: true,
        requirements: true,
        site_adress: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: CustomerProfile })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async customerProfile(
    @common.Param() params: CustomerProfileWhereUniqueInput
  ): Promise<CustomerProfile | null> {
    const result = await this.service.customerProfile({
      where: params,
      select: {
        bestContactTimes: true,
        createdAt: true,
        customerStatusId: true,
        customerType: true,
        email: true,
        firstname: true,
        id: true,
        lastname: true,
        notYetAssigned: true,
        phone: true,
        requirements: true,
        site_adress: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: CustomerProfile })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateCustomerProfile(
    @common.Param() params: CustomerProfileWhereUniqueInput,
    @common.Body() data: CustomerProfileUpdateInput
  ): Promise<CustomerProfile | null> {
    try {
      return await this.service.updateCustomerProfile({
        where: params,
        data: data,
        select: {
          bestContactTimes: true,
          createdAt: true,
          customerStatusId: true,
          customerType: true,
          email: true,
          firstname: true,
          id: true,
          lastname: true,
          notYetAssigned: true,
          phone: true,
          requirements: true,
          site_adress: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: CustomerProfile })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteCustomerProfile(
    @common.Param() params: CustomerProfileWhereUniqueInput
  ): Promise<CustomerProfile | null> {
    try {
      return await this.service.deleteCustomerProfile({
        where: params,
        select: {
          bestContactTimes: true,
          createdAt: true,
          customerStatusId: true,
          customerType: true,
          email: true,
          firstname: true,
          id: true,
          lastname: true,
          notYetAssigned: true,
          phone: true,
          requirements: true,
          site_adress: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Get("/:id/calculationTools")
  @ApiNestedQuery(CalculationToolFindManyArgs)
  async findCalculationTools(
    @common.Req() request: Request,
    @common.Param() params: CustomerProfileWhereUniqueInput
  ): Promise<CalculationTool[]> {
    const query = plainToClass(CalculationToolFindManyArgs, request.query);
    const results = await this.service.findCalculationTools(params.id, {
      ...query,
      select: {
        calculationDetails: true,
        createdAt: true,

        customerProfile: {
          select: {
            id: true,
          },
        },

        id: true,
        result: true,
        toolName: true,
        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/calculationTools")
  async connectCalculationTools(
    @common.Param() params: CustomerProfileWhereUniqueInput,
    @common.Body() body: CalculationToolWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      calculationTools: {
        connect: body,
      },
    };
    await this.service.updateCustomerProfile({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/calculationTools")
  async updateCalculationTools(
    @common.Param() params: CustomerProfileWhereUniqueInput,
    @common.Body() body: CalculationToolWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      calculationTools: {
        set: body,
      },
    };
    await this.service.updateCustomerProfile({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/calculationTools")
  async disconnectCalculationTools(
    @common.Param() params: CustomerProfileWhereUniqueInput,
    @common.Body() body: CalculationToolWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      calculationTools: {
        disconnect: body,
      },
    };
    await this.service.updateCustomerProfile({
      where: params,
      data,
      select: { id: true },
    });
  }
}
