/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  CustomerProfile as PrismaCustomerProfile,
  CalculationTool as PrismaCalculationTool,
} from "@prisma/client";

export class CustomerProfileServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.CustomerProfileCountArgs, "select">
  ): Promise<number> {
    return this.prisma.customerProfile.count(args);
  }

  async customerProfiles<T extends Prisma.CustomerProfileFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.CustomerProfileFindManyArgs>
  ): Promise<PrismaCustomerProfile[]> {
    return this.prisma.customerProfile.findMany<Prisma.CustomerProfileFindManyArgs>(
      args
    );
  }
  async customerProfile<T extends Prisma.CustomerProfileFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.CustomerProfileFindUniqueArgs>
  ): Promise<PrismaCustomerProfile | null> {
    return this.prisma.customerProfile.findUnique(args);
  }
  async createCustomerProfile<T extends Prisma.CustomerProfileCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.CustomerProfileCreateArgs>
  ): Promise<PrismaCustomerProfile> {
    return this.prisma.customerProfile.create<T>(args);
  }
  async updateCustomerProfile<T extends Prisma.CustomerProfileUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.CustomerProfileUpdateArgs>
  ): Promise<PrismaCustomerProfile> {
    return this.prisma.customerProfile.update<T>(args);
  }
  async deleteCustomerProfile<T extends Prisma.CustomerProfileDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.CustomerProfileDeleteArgs>
  ): Promise<PrismaCustomerProfile> {
    return this.prisma.customerProfile.delete(args);
  }

  async findCalculationTools(
    parentId: string,
    args: Prisma.CalculationToolFindManyArgs
  ): Promise<PrismaCalculationTool[]> {
    return this.prisma.customerProfile
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .calculationTools(args);
  }
}
