/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { CustomerProfile } from "./CustomerProfile";
import { CustomerProfileCountArgs } from "./CustomerProfileCountArgs";
import { CustomerProfileFindManyArgs } from "./CustomerProfileFindManyArgs";
import { CustomerProfileFindUniqueArgs } from "./CustomerProfileFindUniqueArgs";
import { CreateCustomerProfileArgs } from "./CreateCustomerProfileArgs";
import { UpdateCustomerProfileArgs } from "./UpdateCustomerProfileArgs";
import { DeleteCustomerProfileArgs } from "./DeleteCustomerProfileArgs";
import { CalculationToolFindManyArgs } from "../../calculationTool/base/CalculationToolFindManyArgs";
import { CalculationTool } from "../../calculationTool/base/CalculationTool";
import { CustomerProfileService } from "../customerProfile.service";
@graphql.Resolver(() => CustomerProfile)
export class CustomerProfileResolverBase {
  constructor(protected readonly service: CustomerProfileService) {}

  async _customerProfilesMeta(
    @graphql.Args() args: CustomerProfileCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [CustomerProfile])
  async customerProfiles(
    @graphql.Args() args: CustomerProfileFindManyArgs
  ): Promise<CustomerProfile[]> {
    return this.service.customerProfiles(args);
  }

  @graphql.Query(() => CustomerProfile, { nullable: true })
  async customerProfile(
    @graphql.Args() args: CustomerProfileFindUniqueArgs
  ): Promise<CustomerProfile | null> {
    const result = await this.service.customerProfile(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => CustomerProfile)
  async createCustomerProfile(
    @graphql.Args() args: CreateCustomerProfileArgs
  ): Promise<CustomerProfile> {
    return await this.service.createCustomerProfile({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => CustomerProfile)
  async updateCustomerProfile(
    @graphql.Args() args: UpdateCustomerProfileArgs
  ): Promise<CustomerProfile | null> {
    try {
      return await this.service.updateCustomerProfile({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => CustomerProfile)
  async deleteCustomerProfile(
    @graphql.Args() args: DeleteCustomerProfileArgs
  ): Promise<CustomerProfile | null> {
    try {
      return await this.service.deleteCustomerProfile(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => [CalculationTool], { name: "calculationTools" })
  async findCalculationTools(
    @graphql.Parent() parent: CustomerProfile,
    @graphql.Args() args: CalculationToolFindManyArgs
  ): Promise<CalculationTool[]> {
    const results = await this.service.findCalculationTools(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }
}
