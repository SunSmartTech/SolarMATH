/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  PVmodule as PrismaPVmodule,
  Manufacturer as PrismaManufacturer,
} from "@prisma/client";

export class PVmoduleServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.PVmoduleCountArgs, "select">): Promise<number> {
    return this.prisma.pVmodule.count(args);
  }

  async pVmodules<T extends Prisma.PVmoduleFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.PVmoduleFindManyArgs>
  ): Promise<PrismaPVmodule[]> {
    return this.prisma.pVmodule.findMany<Prisma.PVmoduleFindManyArgs>(args);
  }
  async pVmodule<T extends Prisma.PVmoduleFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.PVmoduleFindUniqueArgs>
  ): Promise<PrismaPVmodule | null> {
    return this.prisma.pVmodule.findUnique(args);
  }
  async createPVmodule<T extends Prisma.PVmoduleCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.PVmoduleCreateArgs>
  ): Promise<PrismaPVmodule> {
    return this.prisma.pVmodule.create<T>(args);
  }
  async updatePVmodule<T extends Prisma.PVmoduleUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.PVmoduleUpdateArgs>
  ): Promise<PrismaPVmodule> {
    return this.prisma.pVmodule.update<T>(args);
  }
  async deletePVmodule<T extends Prisma.PVmoduleDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.PVmoduleDeleteArgs>
  ): Promise<PrismaPVmodule> {
    return this.prisma.pVmodule.delete(args);
  }

  async getManufacturer(parentId: string): Promise<PrismaManufacturer | null> {
    return this.prisma.pVmodule
      .findUnique({
        where: { id: parentId },
      })
      .manufacturer();
  }
}
