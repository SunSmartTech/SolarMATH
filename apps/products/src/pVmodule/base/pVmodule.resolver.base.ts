/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { PVmodule } from "./PVmodule";
import { PVmoduleCountArgs } from "./PVmoduleCountArgs";
import { PVmoduleFindManyArgs } from "./PVmoduleFindManyArgs";
import { PVmoduleFindUniqueArgs } from "./PVmoduleFindUniqueArgs";
import { CreatePVmoduleArgs } from "./CreatePVmoduleArgs";
import { UpdatePVmoduleArgs } from "./UpdatePVmoduleArgs";
import { DeletePVmoduleArgs } from "./DeletePVmoduleArgs";
import { Manufacturer } from "../../manufacturer/base/Manufacturer";
import { PVmoduleService } from "../pVmodule.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => PVmodule)
export class PVmoduleResolverBase {
  constructor(
    protected readonly service: PVmoduleService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "PVmodule",
    action: "read",
    possession: "any",
  })
  async _pVmodulesMeta(
    @graphql.Args() args: PVmoduleCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [PVmodule])
  @nestAccessControl.UseRoles({
    resource: "PVmodule",
    action: "read",
    possession: "any",
  })
  async pVmodules(
    @graphql.Args() args: PVmoduleFindManyArgs
  ): Promise<PVmodule[]> {
    return this.service.pVmodules(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => PVmodule, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "PVmodule",
    action: "read",
    possession: "own",
  })
  async pVmodule(
    @graphql.Args() args: PVmoduleFindUniqueArgs
  ): Promise<PVmodule | null> {
    const result = await this.service.pVmodule(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => PVmodule)
  @nestAccessControl.UseRoles({
    resource: "PVmodule",
    action: "create",
    possession: "any",
  })
  async createPVmodule(
    @graphql.Args() args: CreatePVmoduleArgs
  ): Promise<PVmodule> {
    return await this.service.createPVmodule({
      ...args,
      data: {
        ...args.data,

        manufacturer: {
          connect: args.data.manufacturer,
        },
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => PVmodule)
  @nestAccessControl.UseRoles({
    resource: "PVmodule",
    action: "update",
    possession: "any",
  })
  async updatePVmodule(
    @graphql.Args() args: UpdatePVmoduleArgs
  ): Promise<PVmodule | null> {
    try {
      return await this.service.updatePVmodule({
        ...args,
        data: {
          ...args.data,

          manufacturer: {
            connect: args.data.manufacturer,
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => PVmodule)
  @nestAccessControl.UseRoles({
    resource: "PVmodule",
    action: "delete",
    possession: "any",
  })
  async deletePVmodule(
    @graphql.Args() args: DeletePVmoduleArgs
  ): Promise<PVmodule | null> {
    try {
      return await this.service.deletePVmodule(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Manufacturer, {
    nullable: true,
    name: "manufacturer",
  })
  @nestAccessControl.UseRoles({
    resource: "Manufacturer",
    action: "read",
    possession: "any",
  })
  async getManufacturer(
    @graphql.Parent() parent: PVmodule
  ): Promise<Manufacturer | null> {
    const result = await this.service.getManufacturer(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
