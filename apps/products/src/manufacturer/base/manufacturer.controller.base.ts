/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import * as nestAccessControl from "nest-access-control";
import * as defaultAuthGuard from "../../auth/defaultAuth.guard";
import { ManufacturerService } from "../manufacturer.service";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { ManufacturerCreateInput } from "./ManufacturerCreateInput";
import { Manufacturer } from "./Manufacturer";
import { ManufacturerFindManyArgs } from "./ManufacturerFindManyArgs";
import { ManufacturerWhereUniqueInput } from "./ManufacturerWhereUniqueInput";
import { ManufacturerUpdateInput } from "./ManufacturerUpdateInput";
import { PVmoduleFindManyArgs } from "../../pVmodule/base/PVmoduleFindManyArgs";
import { PVmodule } from "../../pVmodule/base/PVmodule";
import { PVmoduleWhereUniqueInput } from "../../pVmodule/base/PVmoduleWhereUniqueInput";

@swagger.ApiBearerAuth()
@common.UseGuards(defaultAuthGuard.DefaultAuthGuard, nestAccessControl.ACGuard)
export class ManufacturerControllerBase {
  constructor(
    protected readonly service: ManufacturerService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}
  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Manufacturer })
  @nestAccessControl.UseRoles({
    resource: "Manufacturer",
    action: "create",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async createManufacturer(
    @common.Body() data: ManufacturerCreateInput
  ): Promise<Manufacturer> {
    return await this.service.createManufacturer({
      data: data,
      select: {
        createdBy: true,
        createdOn: true,
        displayOrder: true,
        id: true,
        label: true,
        modifiedBy: true,
        modifiedOn: true,
        productTypes: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get()
  @swagger.ApiOkResponse({ type: [Manufacturer] })
  @ApiNestedQuery(ManufacturerFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "Manufacturer",
    action: "read",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async manufacturers(@common.Req() request: Request): Promise<Manufacturer[]> {
    const args = plainToClass(ManufacturerFindManyArgs, request.query);
    return this.service.manufacturers({
      ...args,
      select: {
        createdBy: true,
        createdOn: true,
        displayOrder: true,
        id: true,
        label: true,
        modifiedBy: true,
        modifiedOn: true,
        productTypes: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Manufacturer })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Manufacturer",
    action: "read",
    possession: "own",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async manufacturer(
    @common.Param() params: ManufacturerWhereUniqueInput
  ): Promise<Manufacturer | null> {
    const result = await this.service.manufacturer({
      where: params,
      select: {
        createdBy: true,
        createdOn: true,
        displayOrder: true,
        id: true,
        label: true,
        modifiedBy: true,
        modifiedOn: true,
        productTypes: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Manufacturer })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Manufacturer",
    action: "update",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async updateManufacturer(
    @common.Param() params: ManufacturerWhereUniqueInput,
    @common.Body() data: ManufacturerUpdateInput
  ): Promise<Manufacturer | null> {
    try {
      return await this.service.updateManufacturer({
        where: params,
        data: data,
        select: {
          createdBy: true,
          createdOn: true,
          displayOrder: true,
          id: true,
          label: true,
          modifiedBy: true,
          modifiedOn: true,
          productTypes: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Manufacturer })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Manufacturer",
    action: "delete",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async deleteManufacturer(
    @common.Param() params: ManufacturerWhereUniqueInput
  ): Promise<Manufacturer | null> {
    try {
      return await this.service.deleteManufacturer({
        where: params,
        select: {
          createdBy: true,
          createdOn: true,
          displayOrder: true,
          id: true,
          label: true,
          modifiedBy: true,
          modifiedOn: true,
          productTypes: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/pVmodules")
  @ApiNestedQuery(PVmoduleFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "PVmodule",
    action: "read",
    possession: "any",
  })
  async findPVmodules(
    @common.Req() request: Request,
    @common.Param() params: ManufacturerWhereUniqueInput
  ): Promise<PVmodule[]> {
    const query = plainToClass(PVmoduleFindManyArgs, request.query);
    const results = await this.service.findPVmodules(params.id, {
      ...query,
      select: {
        cellQuantity: true,
        id: true,

        manufacturer: {
          select: {
            id: true,
          },
        },

        maxPvVoltage: true,
        model: true,
        ratedPower: true,
        temperatureHighC: true,
        temperatureLowC: true,
        unitPrice: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/pVmodules")
  @nestAccessControl.UseRoles({
    resource: "Manufacturer",
    action: "update",
    possession: "any",
  })
  async connectPVmodules(
    @common.Param() params: ManufacturerWhereUniqueInput,
    @common.Body() body: PVmoduleWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      pVmodules: {
        connect: body,
      },
    };
    await this.service.updateManufacturer({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/pVmodules")
  @nestAccessControl.UseRoles({
    resource: "Manufacturer",
    action: "update",
    possession: "any",
  })
  async updatePVmodules(
    @common.Param() params: ManufacturerWhereUniqueInput,
    @common.Body() body: PVmoduleWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      pVmodules: {
        set: body,
      },
    };
    await this.service.updateManufacturer({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/pVmodules")
  @nestAccessControl.UseRoles({
    resource: "Manufacturer",
    action: "update",
    possession: "any",
  })
  async disconnectPVmodules(
    @common.Param() params: ManufacturerWhereUniqueInput,
    @common.Body() body: PVmoduleWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      pVmodules: {
        disconnect: body,
      },
    };
    await this.service.updateManufacturer({
      where: params,
      data,
      select: { id: true },
    });
  }
}
